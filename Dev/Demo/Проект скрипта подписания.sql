--ROLLBACK TRAN
--SELECT * FROM E30247

SET XACT_ABORT ON;
BEGIN TRAN;


-- Работа с источниками. Это уже реализовано, но требует пересмотра и исправлений
DELETE FROM E30247_PRIORITY WHERE PatchId = 312001
DELETE FROM E30247_INITIAL WHERE PatchId = 312001
DELETE FROM E30247_INITIAL_SOURCE WHERE PatchId = 312001
DELETE FROM E30247_INITIAL_DEDUP WHERE PatchId = 312001
DELETE FROM MULTIPLELINK_SOURCE WHERE PatchId = 312001
DELETE FROM POSLINK_SOURCE WHERE PatchId = 312001

INSERT INTO E30247_SOURCE (PatchId, ID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT 312001, ID, 'ЕНСИ', 'ЕНСИ', 'ЕНСИ', 'ЕНСИ'
FROM E30247 e
WHERE PatchID = 312001 AND ID NOT IN (SELECT ID FROM E30247_SOURCE WHERE PatchId = 312001)

INSERT INTO E30247_INITIAL (ID, Directive, GUID, ObjectID, PatchID, UserCode, DocumentBeginDate, DocumentEndDate, ActualBeginDate, ActualEndDate, State, State_Tmp, StateDate, LastChangeDate, AutomaticallyAdded, RemoveLeft, RemoveRight, ObjectDel, RecordType, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT ID, Directive, GUID, ObjectID, PatchID, UserCode, DocumentBeginDate, DocumentEndDate, ActualBeginDate, ActualEndDate, State, State_Tmp, StateDate, LastChangeDate, AutomaticallyAdded, RemoveLeft, RemoveRight, ObjectDel, RecordType, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247
	WHERE PatchId = 312001

INSERT INTO E30247_INITIAL_SOURCE (PatchId, ID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT PatchId, ID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247_SOURCE
	WHERE PatchID = 312001

INSERT INTO E30247_INITIAL_DEDUP (PatchId, ID, DEDUP_STR_1, DEDUP_STR_2, DEDUP_STR_3)
SELECT 312001, ID, DEDUP_STR_1, DEDUP_STR_2, DEDUP_STR_3
	FROM E30247_DEDUP
	WHERE ID IN (SELECT ID FROM E30247 WHERE PatchID = 312001)

INSERT INTO MULTIPLELINK_SOURCE (PatchId, LinkGuid, AncObjectID, RefPositionGuid, RefExtColID)
SELECT 312001, LinkGuid, AncObjectID, RefPositionGuid, RefExtColID
	FROM MULTIPLELINK
	WHERE RefExtColID IN (27455,27456) AND RefPositionGuid IN (SELECT GUID FROM E30247 WHERE PatchID = 312001)

INSERT INTO POSLINK_SOURCE (PatchId, REFPOSITIONGUID, REFELEMENTID, ANCOBJECTID, LINKTYPE, LINKDESC, ANCELEMENTGUID)
SELECT 312001, REFPOSITIONGUID, REFELEMENTID, ANCOBJECTID, LINKTYPE, LINKDESC, ANCELEMENTGUID
	FROM POSLINK
	WHERE REFELEMENTID = 30247 AND REFPOSITIONGUID IN (SELECT GUID FROM E30247 WHERE PatchID = 312001)

INSERT INTO E30247_PRIORITY (PatchId, ID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT 312001, ID, p1.SYSTEM_PRIORITY, 100, p27455.SYSTEM_PRIORITY, p27456.SYSTEM_PRIORITY
	FROM E30247_SOURCE s
	LEFT JOIN
	(
		SELECT COALESCE(c.SYSTEM_CODE, e.SYSTEM_CODE) SYSTEM_CODE, COALESCE(c.SYSTEM_PRIORITY, e.SYSTEM_PRIORITY) SYSTEM_PRIORITY
			FROM (SELECT SYSTEM_CODE, SYSTEM_PRIORITY FROM CLASSIFIER_SOURCE_SYSTEM WHERE N101_ID = 50241) c
			FULL OUTER JOIN (SELECT SYSTEM_CODE, SYSTEM_PRIORITY FROM EXTCOL_SOURCE_SYSTEM WHERE N112_ID = 27453) e ON c.SYSTEM_CODE = e.SYSTEM_CODE
	) p1 ON s.C1783376938461729511 = p1.SYSTEM_CODE
	LEFT JOIN
	(
		SELECT COALESCE(c.SYSTEM_CODE, e.SYSTEM_CODE) SYSTEM_CODE, COALESCE(c.SYSTEM_PRIORITY, e.SYSTEM_PRIORITY) SYSTEM_PRIORITY
			FROM (SELECT SYSTEM_CODE, SYSTEM_PRIORITY FROM CLASSIFIER_SOURCE_SYSTEM WHERE N101_ID = 50241) c
			FULL OUTER JOIN (SELECT SYSTEM_CODE, SYSTEM_PRIORITY FROM EXTCOL_SOURCE_SYSTEM WHERE N112_ID = 27455) e ON c.SYSTEM_CODE = e.SYSTEM_CODE
	) p27455 ON s.C8661971990170678466 = p27455.SYSTEM_CODE
	LEFT JOIN EXTCOL_SOURCE_SYSTEM p27456 ON p27456.N112_ID = 27456 AND s.C3857807440503096169 = p27456.SYSTEM_CODE
	WHERE PatchId = 312001
-- Закончена работа с источниками


-- Обновление ObjectID
CREATE TABLE #T_OBJECTID ([Id] [uniqueidentifier] NOT NULL PRIMARY KEY CLUSTERED, [OldGuid] [uniqueidentifier] NOT NULL, [NewGuid] [uniqueidentifier] NULL)
CREATE NONCLUSTERED INDEX IX_#T_OBJECTID_NID_OID_ID ON #T_OBJECTID (NEWGUID, OLDGUID, ID)
CREATE NONCLUSTERED INDEX IX_#T_OBJECTID_OID_NID_ID ON #T_OBJECTID(OLDGUID, NEWGUID, ID)
INSERT INTO #T_OBJECTID (Id, OldGuid) SELECT Guid, ObjectId FROM E30247 WHERE PatchId = 312001

UPDATE e SET 
		ObjectID = COALESCE(k.ObjectID, a.ObjectID, b.GUID, e.GUID),
		Directive = CASE WHEN e.Directive = 1 THEN 1 WHEN k.ObjectID IS NOT NULL OR a.ObjectID IS NOT NULL OR b.GUID IS NOT NULL THEN 2 ELSE 3 END
	FROM E30247 e
	OUTER APPLY (SELECT TOP 1 t.ObjectID FROM E30247 t WHERE t.STATE IS NOT NULL AND t.ObjectID = e.ObjectID) k
	OUTER APPLY (SELECT TOP 1 t.ObjectID FROM E30247 t WHERE t.STATE IS NOT NULL AND t.UserCode = e.UserCode) a
	OUTER APPLY (SELECT TOP 1 t.GUID FROM E30247 t WHERE t.PATCHID = 312001 AND t.ID < e.ID AND t.UserCode = e.UserCode ORDER BY t.ID) b
	WHERE e.PATCHID = 312001


-- Проверка уникальности USERCODE
SELECT TOP 500 *
	FROM E30247 t0
	LEFT JOIN E30247_SOURCE ts0 ON ts0.ID = t0.ID 
	WHERE t0.ID IN (SELECT f.ID FROM E30247 f WHERE f.PatchID = 312001 AND (
		EXISTS (SELECT * FROM E30247 e  WHERE (e.State_Tmp IS NOT NULL OR e.PatchID = 312001) AND e.ObjectID <> f.ObjectID AND e.USERCODE = f.USERCODE)))



-- Обработка новых позиций
CREATE TABLE #T_NEW_POSITIONS (ID INT NOT NULL PRIMARY KEY CLUSTERED)

INSERT INTO #T_NEW_POSITIONS (ID)
SELECT ID
	FROM E30247 e
	WHERE PatchID = 312001 AND ObjectDel <> 1 AND (ObjectID = GUID OR Directive IN (1, 2) AND
		NOT EXISTS(SELECT * FROM E30247 e2 WHERE e2.ObjectID = e.ObjectID AND (e2.State_Tmp IS NOT NULL OR e2.ID < e.ID)))

UPDATE E30247 SET State_Tmp = 0, StateDate = GETDATE(), LastChangeDate = GETDATE(), ActualBeginDate = GETDATE(), ActualEndDate = GETDATE()
	WHERE ID IN (SELECT ID FROM #T_NEW_POSITIONS)

-- Определение списка позиций для итераций
CREATE TABLE #T_EXISTING_POSITIONS (ID INT NOT NULL, Iteration INT NOT NULL)
CREATE CLUSTERED INDEX IX_T_EXISTING_POSITIONS_1 ON #T_EXISTING_POSITIONS (Iteration ASC, ID ASC)

INSERT INTO #T_EXISTING_POSITIONS (ID, Iteration)
SELECT ID, ROW_NUMBER() OVER(PARTITION BY ObjectID ORDER BY ID)
	FROM E30247
	WHERE PatchID = 312001 AND ID NOT IN (SELECT ID FROM #T_NEW_POSITIONS)

drop table #T_NEW_POSITIONS;

SELECT MAX(Iteration) FROM #T_EXISTING_POSITIONS





-- Итерация 1

-- Создавать таблицу для фантомов на первой итерации и удалять после завершения последней
CREATE TABLE #T_ITERATION
(
	ID INT NOT NULL PRIMARY KEY CLUSTERED,
	ObjectID UNIQUEIDENTIFIER NOT NULL,
	LowerID INT NULL,
	UpperID INT NULL,
	LowerPatchId INT NULL,
	UpperPatchId INT NULL,
	LowerGUID UNIQUEIDENTIFIER NULL,
	UpperGUID UNIQUEIDENTIFIER NULL,
	LowerEdge DATETIME NOT NULL,
	UpperEdge DATETIME NOT NULL,
	RemoveOption INT NOT NULL,
	PhantomDir INT NOT NULL,
	DocumentBeginDate DATETIME NOT NULL,
	DocumentEndDate DATETIME NOT NULL,
	LowerPhantomID INT NULL, -- Добавить
	LowerPhantomGuid UNIQUEIDENTIFIER NOT NULL DEFAULT NEWID(),
	UpperPhantomID INT NULL, -- Добавить
	UpperPhantomGuid UNIQUEIDENTIFIER NOT NULL DEFAULT NEWID(),
	ObjectDel INT NOT NULL
)

-- Переместить создание индексов на момент до первой вставки
CREATE UNIQUE NONCLUSTERED INDEX IX_T_ITERATION_1 ON #T_ITERATION (RemoveOption, ObjectID, LowerEdge, UpperEdge)
CREATE UNIQUE NONCLUSTERED INDEX IX_T_ITERATION_2 ON #T_ITERATION (LowerID, LowerGUID, LowerPhantomGuid, LowerPhantomID, LowerPatchID, DocumentBeginDate)
CREATE UNIQUE NONCLUSTERED INDEX IX_T_ITERATION_3 ON #T_ITERATION (UpperID, UpperGUID, UpperPhantomGuid, UpperPhantomID, UpperPatchID, PhantomDir, DocumentEndDate)


-- Добавить
CREATE TABLE #T_SEPARATE -- 
(
	Id int not null, -- Идентификатор исходной записи в пакете изменений
	Guid uniqueidentifier not null, -- Guid исходной записи в пакете изменений
	IntervalId int not null, -- Идентификатор части расщеплённой записи. Одна из новых записей, которые должны возникнуть на месте исходной
	IntervalGuid uniqueidentifier not null default newid(), -- Guid части расщеплённой записи
	SignedId int null, -- Идентификатор подписанной записи, которой соответствует часть расщеплённой записи
	SignedPatchId int null, -- Идентификатор пакетов изменений подписанной записи, которой соответствует часть расщеплённой записи
	DocumentBeginDate datetime not null,
	DocumentEndDate datetime not null,
	RemoveLeft bit not null,
	RemoveRight bit not null,
	Directive int not null,
	PRIMARY KEY CLUSTERED (Id, IntervalId)
)

CREATE NONCLUSTERED INDEX IX_#T_SEPARATE_1 ON #T_SEPARATE (Guid) INCLUDE (IntervalGuid);
CREATE UNIQUE NONCLUSTERED INDEX IX_#T_SEPARATE_2 ON #T_SEPARATE (IntervalId) INCLUDE (IntervalGuid);


-- Подготовка данных для расщепления записей
-- Добавить
INSERT INTO #T_SEPARATE (Id, Guid, SignedId, SignedPatchId, IntervalId, DocumentBeginDate, DocumentEndDate, RemoveLeft, RemoveRight, Directive) -- Добавить поля
SELECT e.Id, e.GUID, e1.Id, e1.PatchId, next value for SEQ_E30247, -- Добавить поля
		CASE WHEN e.DocumentBeginDate > e1.DocumentBeginDate THEN e.DocumentBeginDate ELSE e1.DocumentBeginDate END BeginDate,
		CASE WHEN e.DocumentEndDate < e1.DocumentEndDate THEN e.DocumentEndDate ELSE e1.DocumentEndDate END EndDate,
		CASE WHEN e.DocumentBeginDate = e1.DocumentBeginDate THEN e.RemoveLeft ELSE 0 END RemoveLeft,
		CASE WHEN e.DocumentEndDate = e1.DocumentEndDate THEN e.RemoveRight ELSE 0 END RemoveRight,
		CASE WHEN e.DocumentEndDate = e1.DocumentEndDate AND e.Directive = 1 THEN 1 ELSE 2 END Directive
	FROM E30247 e
	INNER JOIN E30247_PRIORITY p ON e.PatchId = p.PatchId AND e.Id = p.Id -- Проверить
	INNER JOIN E30247 e1 on e.ObjectId = e1.ObjectId AND e.DocumentBeginDate <= e1.DocumentEndDate AND e1.DocumentBeginDate <= e.DocumentEndDate
	INNER JOIN E30247_PRIORITY p1 ON e1.PatchId = p1.PatchId AND e1.Id = p1.Id AND -- Проверить
		(
			p1.C1783376938461729511 > p.C1783376938461729511 
			OR
			p1.C8592504141572910447 > p.C8592504141572910447 -- Для режима Deny этого условия быть не должно.
			OR
			p1.C8661971990170678466 > p.C8661971990170678466
			OR
			p1.C3857807440503096169 > p.C3857807440503096169
		)
	WHERE e.Id IN (SELECT Id FROM #T_EXISTING_POSITIONS WHERE Iteration = 1) AND e.State IS NULL AND e.ObjectDel = 0 AND e1.State_Tmp = 0;

-- Добавить
INSERT INTO #T_SEPARATE (Id, Guid, SignedId, SignedPatchId, IntervalId, DocumentBeginDate, DocumentEndDate, RemoveLeft, RemoveRight, Directive) -- Добавить поле
SELECT e.Id, e.Guid, null, null, next value for SEQ_E30247, e.DocumentBeginDate, DATEADD(ms, -3, bd.MinBeginDate), e.RemoveLeft, 0, 2 -- Добавить поле
	FROM E30247 e
	INNER JOIN
	(
		SELECT Id, MIN(DocumentBeginDate) MinBeginDate FROM #T_SEPARATE GROUP BY Id
	) bd ON e.Id = bd.Id and e.DocumentBeginDate < bd.MinBeginDate;

-- Добавить
INSERT INTO #T_SEPARATE (Id, Guid, SignedId, SignedPatchId, IntervalId, DocumentBeginDate, DocumentEndDate, RemoveLeft, RemoveRight, Directive) -- Добавить поле
SELECT e.Id, e.Guid, null, null, next value for SEQ_E30247, DATEADD(ms, 3, ed.MaxEndDate), e.DocumentEndDate, 0, e.RemoveRight, e.Directive -- Добавить поле
	FROM E30247 e
	INNER JOIN
	(
		SELECT Id, MAX(DocumentEndDate) MaxEndDate FROM #T_SEPARATE GROUP BY Id
	) ed ON e.Id = ed.Id and e.DocumentEndDate > ed.MaxEndDate;

-- Добавить
INSERT INTO #T_SEPARATE (Id, Guid, SignedId, SignedPatchId, IntervalId, DocumentBeginDate, DocumentEndDate, RemoveLeft, RemoveRight, Directive) -- Добавить поле
SELECT s1.Id, s1.Guid, null, null, next value for SEQ_E30247, DATEADD(ms, 3, s1.DocumentEndDate), DATEADD(ms, -3, s2.DocumentBeginDate), 0, 0, 2 -- Добавить поле
	FROM #T_SEPARATE s1
	INNER JOIN #T_SEPARATE s2 ON s1.Id = s2.Id AND s1.DocumentBeginDate < s2.DocumentBeginDate AND DATEADD(ms, 3, s1.DocumentEndDate) < s2.DocumentBeginDate AND
		NOT EXISTS(SELECT * FROM #T_SEPARATE s3 WHERE s3.Id = s1.Id AND s3.DocumentBeginDate > s1.DocumentBeginDate AND s3.DocumentBeginDate < s2.DocumentBeginDate);
-- Завершение подготовки данных для расщепления записей
SELECT * FROM #T_SEPARATE;



INSERT INTO #T_ITERATION (ID, ObjectID, LowerID, UpperID, LowerPatchID, UpperPatchID, LowerGUID, UpperGUID, LowerEdge, UpperEdge, -- LowerPatchID, UpperPatchID
		RemoveOption, PhantomDir, DocumentBeginDate, DocumentEndDate, ObjectDel)
SELECT ID, ObjectID, LowerID, UpperID, LowerPatchID, UpperPatchID, LowerGUID, UpperGUID, LowerDate, UpperDate, RemoveLeft + RemoveRight * 2, -- LowerPatchID, UpperPatchID
		CASE WHEN ISNULL(UpperDir, 2) = 1 THEN 1 ELSE 2 END, DocumentBeginDate, DocumentEndDate, ObjectDel
	FROM
	(
		SELECT e.ID, e.ObjectID, e.DocumentBeginDate, e.DocumentEndDate, e.RemoveLeft, e.RemoveRight,
				e.LowerID, e.LowerGUID, e.LowerDate, e.LowerPatchID, -- LowerPatchID
				e2.ID as UpperID, e2.GUID as UpperGUID, ISNULL(e2.DocumentEndDate, e.DocumentEndDate) UpperDate, e2.Directive UpperDir, e2.PatchID UpperPatchID, -- UpperPatchID
				e.ObjectDel, ROW_NUMBER()OVER(PARTITION BY e.ObjectID ORDER BY e2.DOCUMENTENDDATE DESC) rn
			FROM
			(
				SELECT e.ID, e.ObjectID, e.DocumentBeginDate, e.DocumentEndDate,
						CASE WHEN e.ObjectDel = 1 THEN 1 ELSE e.RemoveLeft END RemoveLeft,
						CASE WHEN e.ObjectDel = 1 THEN 1 ELSE e.RemoveRight END RemoveRight,
						e1.ID as LowerID, e1.GUID as LowerGUID, ISNULL(e1.DocumentBeginDate, e.DocumentBeginDate) LowerDate, e1.PatchID LowerPatchID, -- LowerPatchID
						e.ObjectDel, ROW_NUMBER()OVER(PARTITION BY e.ObjectID ORDER BY e1.DOCUMENTBEGINDATE) rn
					FROM E30247 e
					LEFT JOIN E30247 e1 ON CASE WHEN e.ObjectDel = 1 THEN 1 ELSE e.RemoveLeft END = 0 AND e1.ObjectID = e.ObjectID AND e1.State_Tmp = 0 AND
						(e.DocumentBeginDate > e1.DOCUMENTBEGINDATE AND e.DocumentBeginDate <= e1.DOCUMENTENDDATE)
					WHERE e.ID IN (SELECT ID FROM #T_EXISTING_POSITIONS WHERE Iteration = 1)
			) e
			LEFT JOIN E30247 e2 ON e.RemoveRight = 0 AND e2.ObjectID = e.ObjectID AND e2.State_Tmp = 0 AND
				(e.DocumentEndDate >= e2.DOCUMENTBEGINDATE AND e.DocumentEndDate < e2.DOCUMENTENDDATE)
			WHERE e.rn = 1
	) q
	WHERE q.rn = 1

UPDATE #T_ITERATION SET LowerPhantomID = NEXT VALUE FOR SEQ_E30247 WHERE LowerID IS NOT NULL; -- Добавить
UPDATE #T_ITERATION SET UpperPhantomID = NEXT VALUE FOR SEQ_E30247 WHERE UpperID IS NOT NULL; -- Добавить

UPDATE e SET State_Tmp = 312001, LastChangeDate = GETDATE()
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON e.ObjectID = t.ObjectID AND t.RemoveOption = 0
	WHERE e.State_Tmp = 0 AND e.DOCUMENTBEGINDATE BETWEEN t.LowerEdge AND t.UpperEdge AND e.DOCUMENTENDDATE BETWEEN t.LowerEdge AND t.UpperEdge

UPDATE e SET State_Tmp = 312001, LastChangeDate = GETDATE()
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON e.ObjectID = t.ObjectID AND t.RemoveOption = 1
	WHERE e.State_Tmp = 0 AND e.DOCUMENTENDDATE <= t.UpperEdge

UPDATE e SET State_Tmp = 312001, LastChangeDate = GETDATE()
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON e.ObjectID = t.ObjectID AND t.RemoveOption = 2
	WHERE e.State_Tmp = 0 AND e.DOCUMENTBEGINDATE >= t.LowerEdge

UPDATE e SET State_Tmp = 312001, LastChangeDate = GETDATE()
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON e.ObjectID = t.ObjectID AND t.RemoveOption = 3
	WHERE e.State_Tmp = 0


UPDATE E30247 SET State_Tmp = CASE WHEN t.ObjectDel = 1 THEN 312001 ELSE 0 END, StateDate = GETDATE(), LastChangeDate = GETDATE(), ActualBeginDate = GETDATE(), ActualEndDate = GETDATE()
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON e.ID = t.ID


INSERT INTO E30247 (id, guid, directive, objectid, patchid, usercode, documentbegindate, documentenddate, actualbegindate, actualenddate, -- Добавить ID
	State_Tmp, StateDate, LastChangeDate, AutomaticallyAdded, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.LowerPhantomId, t.LowerPhantomGuid, 2, e.ObjectID, 312001, e.UserCode, e.DocumentBeginDate, DATEADD(ms, -3, t.DocumentBeginDate), -- Добавить ID
		GETDATE(), GETDATE(), 0,GETDATE(), GETDATE(), 1,
		C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON t.LowerID = e.ID
	WHERE t.LowerID IS NOT NULL

INSERT INTO E30247_DEDUP (ID, DEDUP_STR_1, DEDUP_STR_2, DEDUP_STR_3) -- Исправить запрос
SELECT t.LowerPhantomID, d.DEDUP_STR_1, d.DEDUP_STR_2, d.DEDUP_STR_3
	FROM E30247_DEDUP d
	INNER JOIN #T_ITERATION t ON t.LowerID = d.ID
	WHERE t.LowerID IS NOT NULL

-- Добавить запрос
INSERT INTO E30247_SOURCE (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.LowerPhantomID, 312001, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247_SOURCE es
	INNER JOIN #T_ITERATION t ON t.LowerPatchID = es.PatchID AND t.LowerID = es.ID
	WHERE t.LowerID IS NOT NULL

-- Добавить запрос
INSERT INTO E30247_PRIORITY (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.LowerPhantomID, 312001, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247_PRIORITY es
	INNER JOIN #T_ITERATION t ON t.LowerPatchID = es.PatchID AND t.LowerID = es.ID
	WHERE t.LowerID IS NOT NULL

INSERT INTO POSLINK (REFPOSITIONGUID, REFELEMENTID, ANCOBJECTID, ANCELEMENTGUID, LINKTYPE, LINKDESC)
SELECT t.LowerPhantomGuid, 30247, p.ANCOBJECTID, p.ANCELEMENTGUID, p.LINKTYPE, p.LINKDESC
	FROM POSLINK p
	INNER JOIN #T_ITERATION t ON t.LowerGUID = p.REFPOSITIONGUID
	WHERE p.REFELEMENTID = 30247 AND t.LowerID IS NOT NULL


INSERT INTO E30247 (id, guid, directive, objectid, patchid, usercode, documentbegindate, documentenddate, actualbegindate, actualenddate, -- Добавить ID
	State_Tmp, StateDate, LastChangeDate, AutomaticallyAdded, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.UpperPhantomId, t.UpperPhantomGuid, t.PhantomDir, e.ObjectID, 312001, e.UserCode, DATEADD(ms, 3, t.DocumentEndDate), e.DocumentEndDate, -- Добавить ID
		GETDATE(), GETDATE(), 0,GETDATE(), GETDATE(), 1,
		C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON t.UpperID = e.ID
	WHERE t.UpperID IS NOT NULL

INSERT INTO E30247_DEDUP (ID, DEDUP_STR_1, DEDUP_STR_2, DEDUP_STR_3) -- Исправить запрос
SELECT t.UpperPhantomID, d.DEDUP_STR_1, d.DEDUP_STR_2, d.DEDUP_STR_3
	FROM E30247_DEDUP d
	INNER JOIN #T_ITERATION t ON t.UpperID = d.ID
	WHERE t.UpperID IS NOT NULL

-- Добавить запрос
INSERT INTO E30247_SOURCE (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.UpperPhantomID, 312001, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247_SOURCE es
	INNER JOIN #T_ITERATION t ON t.UpperPatchID = es.PatchID AND t.UpperID = es.ID -- Доработать
	WHERE t.UpperID IS NOT NULL

-- Добавить запрос
INSERT INTO E30247_PRIORITY (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.UpperPhantomID, 312001, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247_PRIORITY es
	INNER JOIN #T_ITERATION t ON t.UpperPatchID = es.PatchID AND t.UpperID = es.ID -- Доработать
	WHERE t.UpperID IS NOT NULL

INSERT INTO POSLINK (REFPOSITIONGUID, REFELEMENTID, ANCOBJECTID, ANCELEMENTGUID, LINKTYPE, LINKDESC)
SELECT t.UpperPhantomGuid, 30247, p.ANCOBJECTID, p.ANCELEMENTGUID, p.LINKTYPE, p.LINKDESC
	FROM POSLINK p
	INNER JOIN #T_ITERATION t ON t.UpperGUID = p.REFPOSITIONGUID
	WHERE p.REFELEMENTID = 30247 AND t.UpperID IS NOT NULL


-- Перенести создание таблицы для ML на стадию до их первого использования и удалять её после окончания всех итераций
CREATE TABLE #T_ITERATION_ML
(
	Guid UNIQUEIDENTIFIER NOT NULL PRIMARY KEY CLUSTERED, -- Изменить наименование с PhantomGuid на Guid
	C8661971990170678466_OLD UNIQUEIDENTIFIER NULL,
	C8661971990170678466_NEW UNIQUEIDENTIFIER NOT NULL DEFAULT NEWID(),
	C3857807440503096169_OLD UNIQUEIDENTIFIER NULL,
	C3857807440503096169_NEW UNIQUEIDENTIFIER NOT NULL DEFAULT NEWID()
)

-- Переместить создание индексов сюда, до вставки
CREATE UNIQUE NONCLUSTERED INDEX IX_#T_ITERATION_ML_1 ON #T_ITERATION_ML (C8661971990170678466_OLD, C8661971990170678466_NEW, Guid)
CREATE UNIQUE NONCLUSTERED INDEX IX_#T_ITERATION_ML_2 ON #T_ITERATION_ML (C3857807440503096169_OLD, C3857807440503096169_NEW, Guid)


INSERT INTO #T_ITERATION_ML (Guid, C8661971990170678466_OLD, C8661971990170678466_NEW, C3857807440503096169_OLD, C3857807440503096169_NEW)
SELECT t.LowerPhantomGuid,
		e.C8661971990170678466,
		CASE WHEN e.C8661971990170678466 IS NOT NULL THEN NEWID() ELSE NULL END,
		e.C3857807440503096169,
		CASE WHEN e.C3857807440503096169 IS NOT NULL THEN NEWID() ELSE NULL END -- Доработать до CASE
	FROM #T_ITERATION t
	INNER JOIN E30247 e ON e.ID = t.LowerID
	WHERE t.LowerID IS NOT NULL

UPDATE e SET C8661971990170678466 = t.C8661971990170678466_NEW, C3857807440503096169 = t.C3857807440503096169_NEW
	FROM E30247 e
	INNER JOIN #T_ITERATION_ML t ON e.GUID = t.Guid

INSERT INTO MULTIPLELINK (LinkGuid, AncObjectID, RefPositionGuid, RefExtColID)
SELECT C8661971990170678466_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C8661971990170678466_OLD
	WHERE t.C8661971990170678466_OLD IS NOT NULL
UNION ALL
SELECT C3857807440503096169_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C3857807440503096169_OLD
	WHERE t.C3857807440503096169_OLD IS NOT NULL


-- Добавить
TRUNCATE TABLE #T_ITERATION_ML;


INSERT INTO #T_ITERATION_ML (Guid, C8661971990170678466_OLD, C8661971990170678466_NEW, C3857807440503096169_OLD, C3857807440503096169_NEW)
SELECT t.UpperPhantomGuid,
		e.C8661971990170678466,
		CASE WHEN e.C8661971990170678466 IS NOT NULL THEN NEWID() ELSE NULL END,
		e.C3857807440503096169,
		CASE WHEN e.C3857807440503096169 IS NOT NULL THEN NEWID() ELSE NULL END -- Доработать до CASE
	FROM #T_ITERATION t
	INNER JOIN E30247 e ON e.ID = t.UpperID
	WHERE t.UpperID IS NOT NULL

UPDATE e SET C8661971990170678466 = t.C8661971990170678466_NEW, C3857807440503096169 = t.C3857807440503096169_NEW
	FROM E30247 e
	INNER JOIN #T_ITERATION_ML t ON e.GUID = t.Guid

INSERT INTO MULTIPLELINK (LinkGuid, AncObjectID, RefPositionGuid, RefExtColID)
SELECT C8661971990170678466_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C8661971990170678466_OLD
	WHERE t.C8661971990170678466_OLD IS NOT NULL
UNION ALL
SELECT C3857807440503096169_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C3857807440503096169_OLD
	WHERE t.C3857807440503096169_OLD IS NOT NULL

-- Очищать таблицу ML в конце каждой итерации
TRUNCATE TABLE #T_ITERATION_ML;


-- Работа с приоритетами систем-источников. Весь этот блок добавить!
INSERT INTO E30247 (id, guid, directive, objectid, patchid, usercode, documentbegindate, documentenddate, actualbegindate, actualenddate,
	State_Tmp, StateDate, LastChangeDate, AutomaticallyAdded, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT s.IntervalId, s.IntervalGuid, s.Directive, e.ObjectID, 312001,
		CASE WHEN p1.C1783376938461729511 > p.C1783376938461729511 THEN e1.UserCode ELSE e.UserCode END UserCode,
		s.DocumentBeginDate, s.DocumentEndDate, e.ActualBeginDate, e.ActualEndDate, 0, e.StateDate, e.LastChangeDate, e.AutomaticallyAdded,
		--s.SignedId, p1.C1783376938461729511, p.C1783376938461729511,
		CASE WHEN p1.C1783376938461729511 > p.C1783376938461729511 THEN e1.C1783376938461729511 ELSE e.C1783376938461729511 END C1783376938461729511,
		--p1.C8592504141572910447, p.C8592504141572910447,
		CASE WHEN p1.C8592504141572910447 > p.C8592504141572910447 THEN e1.C8592504141572910447 ELSE e.C8592504141572910447 END C8592504141572910447, -- Этого быть не должно, поскольку режим Deny
		--p1.C8661971990170678466, p.C8661971990170678466,
		CASE WHEN p1.C8661971990170678466 > p.C8661971990170678466 THEN e1.C8661971990170678466 ELSE e.C8661971990170678466 END C8661971990170678466, -- LinkGuid для ML также копируем, это позволит
		--p1.C3857807440503096169, p.C3857807440503096169,
		CASE WHEN p1.C3857807440503096169 > p.C3857807440503096169 THEN e1.C3857807440503096169 ELSE e.C3857807440503096169 END C3857807440503096169 -- сравнивать без объединений с PRIORITY
	FROM E30247 e
	INNER JOIN E30247_PRIORITY p ON e.PatchID = p.PatchID AND e.ID = p.ID -- Добавить PatchID
	INNER JOIN #T_SEPARATE s ON e.ID = s.ID
	LEFT JOIN E30247 e1 ON e1.ID = s.SignedId
	LEFT JOIN E30247_PRIORITY p1 ON e1.PatchId = p1.PatchId AND e1.ID = p1.ID; -- Добавить PatchId

 -- Только если раздел поддерживает дедупликацию. Сравнение приоритетов только для дедуплицируемых реквизитов
 -- Если у подписанных записей приоритет больше, записи не вставляются и будут сформированы асинхронным процессом
 -- В тестовом случае такого запроса быть не должно, поскольку наименование не поддерживает приоритеты
INSERT INTO E30247_DEDUP (ID, DEDUP_STR_1, DEDUP_STR_2, DEDUP_STR_3)
SELECT s.IntervalId, d.DEDUP_STR_1, d.DEDUP_STR_2, d.DEDUP_STR_3
	FROM E30247_DEDUP d
	INNER JOIN #T_SEPARATE s ON d.ID = s.ID
	INNER JOIN E30247_PRIORITY p ON p.PatchId = 312001 AND p.ID = s.ID -- Добавить поля
	LEFT JOIN E30247_PRIORITY p1 ON p1.PatchID = s.SignedPatchId AND p1.ID = s.SignedId -- Добавить поля
	WHERE p1.ID IS NULL OR (p1.C8592504141572910447 <= p.C8592504141572910447 /* AND ...*/);

INSERT INTO E30247_SOURCE (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT s.IntervalId, 312001,
		--s.SignedId, p1.C1783376938461729511, p.C1783376938461729511,
		CASE WHEN p1.C1783376938461729511 > p.C1783376938461729511 THEN e1.C1783376938461729511 ELSE e.C1783376938461729511 END C1783376938461729511,
		--p1.C8592504141572910447, p.C8592504141572910447,
		CASE WHEN p1.C8592504141572910447 > p.C8592504141572910447 THEN e1.C8592504141572910447 ELSE e.C8592504141572910447 END C8592504141572910447, -- Этого быть не должно, поскольку режим Deny
		--p1.C8661971990170678466, p.C8661971990170678466,
		CASE WHEN p1.C8661971990170678466 > p.C8661971990170678466 THEN e1.C8661971990170678466 ELSE e.C8661971990170678466 END C8661971990170678466, -- LinkGuid для ML также копируем, это позволит
		--p1.C3857807440503096169, p.C3857807440503096169,
		CASE WHEN p1.C3857807440503096169 > p.C3857807440503096169 THEN e1.C3857807440503096169 ELSE e.C3857807440503096169 END C3857807440503096169 -- сравнивать без объединений с PRIORITY
	FROM E30247_SOURCE e
	INNER JOIN E30247_PRIORITY p ON p.PatchId = 312001 AND p.ID = e.ID -- Доработать
	INNER JOIN #T_SEPARATE s ON e.PatchId = 312001 AND e.ID = s.ID -- Доработать
	LEFT JOIN E30247_SOURCE e1 ON e1.PatchId = s.SignedPatchId AND e1.ID = s.SignedId -- Доработать
	LEFT JOIN E30247_PRIORITY p1 ON e1.PatchId = p1.PatchId AND e1.ID = p1.ID; -- Доработать

INSERT INTO E30247_PRIORITY (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT s.IntervalId, 312001,
		--s.SignedId, p1.C1783376938461729511, p.C1783376938461729511,
		CASE WHEN p1.C1783376938461729511 > p.C1783376938461729511 THEN p1.C1783376938461729511 ELSE p.C1783376938461729511 END C1783376938461729511,
		--p1.C8592504141572910447, p.C8592504141572910447,
		CASE WHEN p1.C8592504141572910447 > p.C8592504141572910447 THEN p1.C8592504141572910447 ELSE p.C8592504141572910447 END C8592504141572910447, -- Этого быть не должно, поскольку режим Deny
		--p1.C8661971990170678466, p.C8661971990170678466,
		CASE WHEN p1.C8661971990170678466 > p.C8661971990170678466 THEN p1.C8661971990170678466 ELSE p.C8661971990170678466 END C8661971990170678466, -- LinkGuid для ML также копируем, это позволит
		--p1.C3857807440503096169, p.C3857807440503096169,
		CASE WHEN p1.C3857807440503096169 > p.C3857807440503096169 THEN p1.C3857807440503096169 ELSE p.C3857807440503096169 END C3857807440503096169 -- сравнивать без объединений с PRIORITY
	FROM E30247_PRIORITY p
	INNER JOIN #T_SEPARATE s ON p.PatchId = 312001 AND p.ID = s.ID -- Доработать
	LEFT JOIN E30247_PRIORITY p1 ON p1.PatchId = s.SignedPatchId AND p1.ID = s.SignedId; -- Доработать

INSERT INTO POSLINK (REFPOSITIONGUID, REFELEMENTID, ANCOBJECTID, ANCELEMENTGUID, LINKTYPE, LINKDESC)
SELECT s.IntervalGuid, 30247, p.ANCOBJECTID, p.ANCELEMENTGUID, p.LINKTYPE, p.LINKDESC
	FROM POSLINK p
	INNER JOIN #T_SEPARATE s ON p.REFPOSITIONGUID = s.Guid
	WHERE p.REFELEMENTID = 30247;
	
INSERT INTO #T_ITERATION_ML (Guid, C8661971990170678466_OLD, C8661971990170678466_NEW, C3857807440503096169_OLD, C3857807440503096169_NEW)
SELECT s.IntervalGuid,
		e.C8661971990170678466,
		CASE WHEN e.C8661971990170678466 IS NOT NULL THEN NEWID() ELSE NULL END,
		e.C3857807440503096169,
		CASE WHEN e.C3857807440503096169 IS NOT NULL THEN NEWID() ELSE NULL END -- Доработать до CASE
	FROM #T_SEPARATE s
	INNER JOIN E30247 e ON e.Id = s.IntervalId;

UPDATE e SET C8661971990170678466 = t.C8661971990170678466_NEW, C3857807440503096169 = t.C3857807440503096169_NEW
	FROM E30247 e
	INNER JOIN #T_ITERATION_ML t ON e.GUID = t.Guid

INSERT INTO MULTIPLELINK (LinkGuid, AncObjectID, RefPositionGuid, RefExtColID)
SELECT C8661971990170678466_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C8661971990170678466_OLD
	WHERE t.C8661971990170678466_OLD IS NOT NULL
UNION ALL
SELECT C3857807440503096169_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C3857807440503096169_OLD
	WHERE t.C3857807440503096169_OLD IS NOT NULL

-- Очищать таблицу ML в конце каждой итерации
TRUNCATE TABLE #T_ITERATION_ML;


-- Удаляем записи, подвергшиеся расщеплению
DELETE FROM E30247_DEDUP WHERE ID IN (SELECT Id FROM #T_SEPARATE);
DELETE FROM E30247_SOURCE WHERE PatchId = 312001 AND ID IN (SELECT ID FROM #T_SEPARATE); -- Доработать
DELETE FROM E30247_PRIORITY WHERE PatchId = 312001 AND ID IN (SELECT Id FROM #T_SEPARATE); -- Доработать
DELETE FROM E30247 WHERE ID IN (SELECT Id FROM #T_SEPARATE);
DELETE FROM POSLINK WHERE REFELEMENTID = 30247 AND REFPOSITIONGUID IN (SELECT Guid FROM #T_SEPARATE);
DELETE FROM MULTIPLELINK WHERE RefExtColID IN (27455,27456) AND RefPositionGuid IN (SELECT Guid FROM #T_SEPARATE);


-- Очищать таблицу в конце каждой итерации
TRUNCATE TABLE #T_ITERATION;

-- Очищать таблицу в конце каждой итерации
TRUNCATE TABLE #T_SEPARATE;
SELECT @@TRANCOUNT


-- Итерация 2

-- Подготовка данных для расщепления записей
-- Добавить
INSERT INTO #T_SEPARATE (Id, Guid, SignedId, SignedPatchId, IntervalId, DocumentBeginDate, DocumentEndDate, RemoveLeft, RemoveRight, Directive) -- Добавить поля
SELECT e.Id, e.GUID, e1.Id, e1.PatchId, next value for SEQ_E30247, -- Добавить поля
		CASE WHEN e.DocumentBeginDate > e1.DocumentBeginDate THEN e.DocumentBeginDate ELSE e1.DocumentBeginDate END BeginDate,
		CASE WHEN e.DocumentEndDate < e1.DocumentEndDate THEN e.DocumentEndDate ELSE e1.DocumentEndDate END EndDate,
		CASE WHEN e.DocumentBeginDate = e1.DocumentBeginDate THEN e.RemoveLeft ELSE 0 END RemoveLeft,
		CASE WHEN e.DocumentEndDate = e1.DocumentEndDate THEN e.RemoveRight ELSE 0 END RemoveRight,
		CASE WHEN e.DocumentEndDate = e1.DocumentEndDate AND e.Directive = 1 THEN 1 ELSE 2 END Directive
	FROM E30247 e
	INNER JOIN E30247_PRIORITY p ON e.PatchId = p.PatchId AND e.Id = p.Id -- Проверить
	INNER JOIN E30247 e1 on e.ObjectId = e1.ObjectId AND e.DocumentBeginDate <= e1.DocumentEndDate AND e1.DocumentBeginDate <= e.DocumentEndDate
	INNER JOIN E30247_PRIORITY p1 ON e1.PatchId = p1.PatchId AND e1.Id = p1.Id AND -- Проверить
		(
			p1.C1783376938461729511 > p.C1783376938461729511 
			OR
			p1.C8592504141572910447 > p.C8592504141572910447 -- Для режима Deny этого условия быть не должно.
			OR
			p1.C8661971990170678466 > p.C8661971990170678466
			OR
			p1.C3857807440503096169 > p.C3857807440503096169
		)
	WHERE e.Id IN (SELECT Id FROM #T_EXISTING_POSITIONS WHERE Iteration = 1) AND e.State IS NULL AND e.ObjectDel = 0 AND e1.State_Tmp = 0;

-- Добавить
INSERT INTO #T_SEPARATE (Id, Guid, SignedId, SignedPatchId, IntervalId, DocumentBeginDate, DocumentEndDate, RemoveLeft, RemoveRight, Directive) -- Добавить поле
SELECT e.Id, e.Guid, null, null, next value for SEQ_E30247, e.DocumentBeginDate, DATEADD(ms, -3, bd.MinBeginDate), e.RemoveLeft, 0, 2 -- Добавить поле
	FROM E30247 e
	INNER JOIN
	(
		SELECT Id, MIN(DocumentBeginDate) MinBeginDate FROM #T_SEPARATE GROUP BY Id
	) bd ON e.Id = bd.Id and e.DocumentBeginDate < bd.MinBeginDate;

-- Добавить
INSERT INTO #T_SEPARATE (Id, Guid, SignedId, SignedPatchId, IntervalId, DocumentBeginDate, DocumentEndDate, RemoveLeft, RemoveRight, Directive) -- Добавить поле
SELECT e.Id, e.Guid, null, null, next value for SEQ_E30247, DATEADD(ms, 3, ed.MaxEndDate), e.DocumentEndDate, 0, e.RemoveRight, e.Directive -- Добавить поле
	FROM E30247 e
	INNER JOIN
	(
		SELECT Id, MAX(DocumentEndDate) MaxEndDate FROM #T_SEPARATE GROUP BY Id
	) ed ON e.Id = ed.Id and e.DocumentEndDate > ed.MaxEndDate;

-- Добавить
INSERT INTO #T_SEPARATE (Id, Guid, SignedId, SignedPatchId, IntervalId, DocumentBeginDate, DocumentEndDate, RemoveLeft, RemoveRight, Directive) -- Добавить поле
SELECT s1.Id, s1.Guid, null, null, next value for SEQ_E30247, DATEADD(ms, 3, s1.DocumentEndDate), DATEADD(ms, -3, s2.DocumentBeginDate), 0, 0, 2 -- Добавить поле
	FROM #T_SEPARATE s1
	INNER JOIN #T_SEPARATE s2 ON s1.Id = s2.Id AND s1.DocumentBeginDate < s2.DocumentBeginDate AND DATEADD(ms, 3, s1.DocumentEndDate) < s2.DocumentBeginDate AND
		NOT EXISTS(SELECT * FROM #T_SEPARATE s3 WHERE s3.Id = s1.Id AND s3.DocumentBeginDate > s1.DocumentBeginDate AND s3.DocumentBeginDate < s2.DocumentBeginDate);
-- Завершение подготовки данных для расщепления записей
SELECT * FROM #T_SEPARATE;



INSERT INTO #T_ITERATION (ID, ObjectID, LowerID, UpperID, LowerPatchID, UpperPatchID, LowerGUID, UpperGUID, LowerEdge, UpperEdge, -- LowerPatchID, UpperPatchID
		RemoveOption, PhantomDir, DocumentBeginDate, DocumentEndDate, ObjectDel)
SELECT ID, ObjectID, LowerID, UpperID, LowerPatchID, UpperPatchID, LowerGUID, UpperGUID, LowerDate, UpperDate, RemoveLeft + RemoveRight * 2, -- LowerPatchID, UpperPatchID
		CASE WHEN ISNULL(UpperDir, 2) = 1 THEN 1 ELSE 2 END, DocumentBeginDate, DocumentEndDate, ObjectDel
	FROM
	(
		SELECT e.ID, e.ObjectID, e.DocumentBeginDate, e.DocumentEndDate, e.RemoveLeft, e.RemoveRight,
				e.LowerID, e.LowerGUID, e.LowerDate, e.LowerPatchID, -- LowerPatchID
				e2.ID as UpperID, e2.GUID as UpperGUID, ISNULL(e2.DocumentEndDate, e.DocumentEndDate) UpperDate, e2.Directive UpperDir, e2.PatchID UpperPatchID, -- UpperPatchID
				e.ObjectDel, ROW_NUMBER()OVER(PARTITION BY e.ObjectID ORDER BY e2.DOCUMENTENDDATE DESC) rn
			FROM
			(
				SELECT e.ID, e.ObjectID, e.DocumentBeginDate, e.DocumentEndDate,
						CASE WHEN e.ObjectDel = 1 THEN 1 ELSE e.RemoveLeft END RemoveLeft,
						CASE WHEN e.ObjectDel = 1 THEN 1 ELSE e.RemoveRight END RemoveRight,
						e1.ID as LowerID, e1.GUID as LowerGUID, ISNULL(e1.DocumentBeginDate, e.DocumentBeginDate) LowerDate, e1.PatchID LowerPatchID, -- LowerPatchID
						e.ObjectDel, ROW_NUMBER()OVER(PARTITION BY e.ObjectID ORDER BY e1.DOCUMENTBEGINDATE) rn
					FROM E30247 e
					LEFT JOIN E30247 e1 ON CASE WHEN e.ObjectDel = 1 THEN 1 ELSE e.RemoveLeft END = 0 AND e1.ObjectID = e.ObjectID AND e1.State_Tmp = 0 AND
						(e.DocumentBeginDate > e1.DOCUMENTBEGINDATE AND e.DocumentBeginDate <= e1.DOCUMENTENDDATE)
					WHERE e.ID IN (SELECT ID FROM #T_EXISTING_POSITIONS WHERE Iteration = 1)
			) e
			LEFT JOIN E30247 e2 ON e.RemoveRight = 0 AND e2.ObjectID = e.ObjectID AND e2.State_Tmp = 0 AND
				(e.DocumentEndDate >= e2.DOCUMENTBEGINDATE AND e.DocumentEndDate < e2.DOCUMENTENDDATE)
			WHERE e.rn = 1
	) q
	WHERE q.rn = 1

UPDATE #T_ITERATION SET LowerPhantomID = NEXT VALUE FOR SEQ_E30247 WHERE LowerID IS NOT NULL; -- Добавить
UPDATE #T_ITERATION SET UpperPhantomID = NEXT VALUE FOR SEQ_E30247 WHERE UpperID IS NOT NULL; -- Добавить

UPDATE e SET State_Tmp = 312001, LastChangeDate = GETDATE()
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON e.ObjectID = t.ObjectID AND t.RemoveOption = 0
	WHERE e.State_Tmp = 0 AND e.DOCUMENTBEGINDATE BETWEEN t.LowerEdge AND t.UpperEdge AND e.DOCUMENTENDDATE BETWEEN t.LowerEdge AND t.UpperEdge

UPDATE e SET State_Tmp = 312001, LastChangeDate = GETDATE()
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON e.ObjectID = t.ObjectID AND t.RemoveOption = 1
	WHERE e.State_Tmp = 0 AND e.DOCUMENTENDDATE <= t.UpperEdge

UPDATE e SET State_Tmp = 312001, LastChangeDate = GETDATE()
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON e.ObjectID = t.ObjectID AND t.RemoveOption = 2
	WHERE e.State_Tmp = 0 AND e.DOCUMENTBEGINDATE >= t.LowerEdge

UPDATE e SET State_Tmp = 312001, LastChangeDate = GETDATE()
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON e.ObjectID = t.ObjectID AND t.RemoveOption = 3
	WHERE e.State_Tmp = 0


UPDATE E30247 SET State_Tmp = CASE WHEN t.ObjectDel = 1 THEN 312001 ELSE 0 END, StateDate = GETDATE(), LastChangeDate = GETDATE(), ActualBeginDate = GETDATE(), ActualEndDate = GETDATE()
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON e.ID = t.ID


INSERT INTO E30247 (id, guid, directive, objectid, patchid, usercode, documentbegindate, documentenddate, actualbegindate, actualenddate, -- Добавить ID
	State_Tmp, StateDate, LastChangeDate, AutomaticallyAdded, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.LowerPhantomId, t.LowerPhantomGuid, 2, e.ObjectID, 312001, e.UserCode, e.DocumentBeginDate, DATEADD(ms, -3, t.DocumentBeginDate), -- Добавить ID
		GETDATE(), GETDATE(), 0,GETDATE(), GETDATE(), 1,
		C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON t.LowerID = e.ID
	WHERE t.LowerID IS NOT NULL

INSERT INTO E30247_DEDUP (ID, DEDUP_STR_1, DEDUP_STR_2, DEDUP_STR_3) -- Исправить запрос
SELECT t.LowerPhantomID, d.DEDUP_STR_1, d.DEDUP_STR_2, d.DEDUP_STR_3
	FROM E30247_DEDUP d
	INNER JOIN #T_ITERATION t ON t.LowerID = d.ID
	WHERE t.LowerID IS NOT NULL

-- Добавить запрос
INSERT INTO E30247_SOURCE (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.LowerPhantomID, 312001, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247_SOURCE es
	INNER JOIN #T_ITERATION t ON t.LowerPatchID = es.PatchID AND t.LowerID = es.ID
	WHERE t.LowerID IS NOT NULL

-- Добавить запрос
INSERT INTO E30247_PRIORITY (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.LowerPhantomID, 312001, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247_PRIORITY es
	INNER JOIN #T_ITERATION t ON t.LowerPatchID = es.PatchID AND t.LowerID = es.ID
	WHERE t.LowerID IS NOT NULL

INSERT INTO POSLINK (REFPOSITIONGUID, REFELEMENTID, ANCOBJECTID, ANCELEMENTGUID, LINKTYPE, LINKDESC)
SELECT t.LowerPhantomGuid, 30247, p.ANCOBJECTID, p.ANCELEMENTGUID, p.LINKTYPE, p.LINKDESC
	FROM POSLINK p
	INNER JOIN #T_ITERATION t ON t.LowerGUID = p.REFPOSITIONGUID
	WHERE p.REFELEMENTID = 30247 AND t.LowerID IS NOT NULL


INSERT INTO E30247 (id, guid, directive, objectid, patchid, usercode, documentbegindate, documentenddate, actualbegindate, actualenddate, -- Добавить ID
	State_Tmp, StateDate, LastChangeDate, AutomaticallyAdded, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.UpperPhantomId, t.UpperPhantomGuid, t.PhantomDir, e.ObjectID, 312001, e.UserCode, DATEADD(ms, 3, t.DocumentEndDate), e.DocumentEndDate, -- Добавить ID
		GETDATE(), GETDATE(), 0,GETDATE(), GETDATE(), 1,
		C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON t.UpperID = e.ID
	WHERE t.UpperID IS NOT NULL

INSERT INTO E30247_DEDUP (ID, DEDUP_STR_1, DEDUP_STR_2, DEDUP_STR_3) -- Исправить запрос
SELECT t.UpperPhantomID, d.DEDUP_STR_1, d.DEDUP_STR_2, d.DEDUP_STR_3
	FROM E30247_DEDUP d
	INNER JOIN #T_ITERATION t ON t.UpperID = d.ID
	WHERE t.UpperID IS NOT NULL

-- Добавить запрос
INSERT INTO E30247_SOURCE (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.UpperPhantomID, 312001, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247_SOURCE es
	INNER JOIN #T_ITERATION t ON t.UpperPatchID = es.PatchID AND t.UpperID = es.ID -- Доработать
	WHERE t.UpperID IS NOT NULL

-- Добавить запрос
INSERT INTO E30247_PRIORITY (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.UpperPhantomID, 312001, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247_PRIORITY es
	INNER JOIN #T_ITERATION t ON t.UpperPatchID = es.PatchID AND t.UpperID = es.ID -- Доработать
	WHERE t.UpperID IS NOT NULL

INSERT INTO POSLINK (REFPOSITIONGUID, REFELEMENTID, ANCOBJECTID, ANCELEMENTGUID, LINKTYPE, LINKDESC)
SELECT t.UpperPhantomGuid, 30247, p.ANCOBJECTID, p.ANCELEMENTGUID, p.LINKTYPE, p.LINKDESC
	FROM POSLINK p
	INNER JOIN #T_ITERATION t ON t.UpperGUID = p.REFPOSITIONGUID
	WHERE p.REFELEMENTID = 30247 AND t.UpperID IS NOT NULL


-- Добавить
TRUNCATE TABLE #T_ITERATION_ML;


INSERT INTO #T_ITERATION_ML (Guid, C8661971990170678466_OLD, C8661971990170678466_NEW, C3857807440503096169_OLD, C3857807440503096169_NEW)
SELECT t.LowerPhantomGuid,
		e.C8661971990170678466,
		CASE WHEN e.C8661971990170678466 IS NOT NULL THEN NEWID() ELSE NULL END,
		e.C3857807440503096169,
		CASE WHEN e.C3857807440503096169 IS NOT NULL THEN NEWID() ELSE NULL END -- Доработать до CASE
	FROM #T_ITERATION t
	INNER JOIN E30247 e ON e.ID = t.LowerID
	WHERE t.LowerID IS NOT NULL

UPDATE e SET C8661971990170678466 = t.C8661971990170678466_NEW, C3857807440503096169 = t.C3857807440503096169_NEW
	FROM E30247 e
	INNER JOIN #T_ITERATION_ML t ON e.GUID = t.Guid

INSERT INTO MULTIPLELINK (LinkGuid, AncObjectID, RefPositionGuid, RefExtColID)
SELECT C8661971990170678466_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C8661971990170678466_OLD
	WHERE t.C8661971990170678466_OLD IS NOT NULL
UNION ALL
SELECT C3857807440503096169_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C3857807440503096169_OLD
	WHERE t.C3857807440503096169_OLD IS NOT NULL


-- Добавить
TRUNCATE TABLE #T_ITERATION_ML;


INSERT INTO #T_ITERATION_ML (Guid, C8661971990170678466_OLD, C8661971990170678466_NEW, C3857807440503096169_OLD, C3857807440503096169_NEW)
SELECT t.UpperPhantomGuid,
		e.C8661971990170678466,
		CASE WHEN e.C8661971990170678466 IS NOT NULL THEN NEWID() ELSE NULL END,
		e.C3857807440503096169,
		CASE WHEN e.C3857807440503096169 IS NOT NULL THEN NEWID() ELSE NULL END -- Доработать до CASE
	FROM #T_ITERATION t
	INNER JOIN E30247 e ON e.ID = t.UpperID
	WHERE t.UpperID IS NOT NULL

UPDATE e SET C8661971990170678466 = t.C8661971990170678466_NEW, C3857807440503096169 = t.C3857807440503096169_NEW
	FROM E30247 e
	INNER JOIN #T_ITERATION_ML t ON e.GUID = t.Guid

INSERT INTO MULTIPLELINK (LinkGuid, AncObjectID, RefPositionGuid, RefExtColID)
SELECT C8661971990170678466_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C8661971990170678466_OLD
	WHERE t.C8661971990170678466_OLD IS NOT NULL
UNION ALL
SELECT C3857807440503096169_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C3857807440503096169_OLD
	WHERE t.C3857807440503096169_OLD IS NOT NULL

-- Очищать таблицу ML в конце каждой итерации
TRUNCATE TABLE #T_ITERATION_ML;


-- Работа с приоритетами систем-источников. Весь этот блок добавить!
INSERT INTO E30247 (id, guid, directive, objectid, patchid, usercode, documentbegindate, documentenddate, actualbegindate, actualenddate,
	State_Tmp, StateDate, LastChangeDate, AutomaticallyAdded, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT s.IntervalId, s.IntervalGuid, s.Directive, e.ObjectID, 312001,
		CASE WHEN p1.C1783376938461729511 > p.C1783376938461729511 THEN e1.UserCode ELSE e.UserCode END UserCode,
		s.DocumentBeginDate, s.DocumentEndDate, e.ActualBeginDate, e.ActualEndDate, 0, e.StateDate, e.LastChangeDate, e.AutomaticallyAdded,
		--s.SignedId, p1.C1783376938461729511, p.C1783376938461729511,
		CASE WHEN p1.C1783376938461729511 > p.C1783376938461729511 THEN e1.C1783376938461729511 ELSE e.C1783376938461729511 END C1783376938461729511,
		--p1.C8592504141572910447, p.C8592504141572910447,
		CASE WHEN p1.C8592504141572910447 > p.C8592504141572910447 THEN e1.C8592504141572910447 ELSE e.C8592504141572910447 END C8592504141572910447, -- Этого быть не должно, поскольку режим Deny
		--p1.C8661971990170678466, p.C8661971990170678466,
		CASE WHEN p1.C8661971990170678466 > p.C8661971990170678466 THEN e1.C8661971990170678466 ELSE e.C8661971990170678466 END C8661971990170678466, -- LinkGuid для ML также копируем, это позволит
		--p1.C3857807440503096169, p.C3857807440503096169,
		CASE WHEN p1.C3857807440503096169 > p.C3857807440503096169 THEN e1.C3857807440503096169 ELSE e.C3857807440503096169 END C3857807440503096169 -- сравнивать без объединений с PRIORITY
	FROM E30247 e
	INNER JOIN E30247_PRIORITY p ON e.PatchID = p.PatchID AND e.ID = p.ID -- Добавить PatchID
	INNER JOIN #T_SEPARATE s ON e.ID = s.ID
	LEFT JOIN E30247 e1 ON e1.ID = s.SignedId
	LEFT JOIN E30247_PRIORITY p1 ON e1.PatchId = p1.PatchId AND e1.ID = p1.ID; -- Добавить PatchId

 -- Только если раздел поддерживает дедупликацию. Сравнение приоритетов только для дедуплицируемых реквизитов
 -- Если у подписанных записей приоритет больше, записи не вставляются и будут сформированы асинхронным процессом
 -- В тестовом случае такого запроса быть не должно, поскольку наименование не поддерживает приоритеты
INSERT INTO E30247_DEDUP (ID, DEDUP_STR_1, DEDUP_STR_2, DEDUP_STR_3)
SELECT s.IntervalId, d.DEDUP_STR_1, d.DEDUP_STR_2, d.DEDUP_STR_3
	FROM E30247_DEDUP d
	INNER JOIN #T_SEPARATE s ON d.ID = s.ID
	INNER JOIN E30247_PRIORITY p ON p.PatchId = 312001 AND p.ID = s.ID -- Добавить поля
	LEFT JOIN E30247_PRIORITY p1 ON p1.PatchID = s.SignedPatchId AND p1.ID = s.SignedId -- Добавить поля
	WHERE p1.ID IS NULL OR (p1.C8592504141572910447 <= p.C8592504141572910447 /* AND ...*/);

INSERT INTO E30247_SOURCE (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT s.IntervalId, 312001,
		--s.SignedId, p1.C1783376938461729511, p.C1783376938461729511,
		CASE WHEN p1.C1783376938461729511 > p.C1783376938461729511 THEN e1.C1783376938461729511 ELSE e.C1783376938461729511 END C1783376938461729511,
		--p1.C8592504141572910447, p.C8592504141572910447,
		CASE WHEN p1.C8592504141572910447 > p.C8592504141572910447 THEN e1.C8592504141572910447 ELSE e.C8592504141572910447 END C8592504141572910447, -- Этого быть не должно, поскольку режим Deny
		--p1.C8661971990170678466, p.C8661971990170678466,
		CASE WHEN p1.C8661971990170678466 > p.C8661971990170678466 THEN e1.C8661971990170678466 ELSE e.C8661971990170678466 END C8661971990170678466, -- LinkGuid для ML также копируем, это позволит
		--p1.C3857807440503096169, p.C3857807440503096169,
		CASE WHEN p1.C3857807440503096169 > p.C3857807440503096169 THEN e1.C3857807440503096169 ELSE e.C3857807440503096169 END C3857807440503096169 -- сравнивать без объединений с PRIORITY
	FROM E30247_SOURCE e
	INNER JOIN E30247_PRIORITY p ON p.PatchId = 312001 AND p.ID = e.ID -- Доработать
	INNER JOIN #T_SEPARATE s ON e.PatchId = 312001 AND e.ID = s.ID -- Доработать
	LEFT JOIN E30247_SOURCE e1 ON e1.PatchId = s.SignedPatchId AND e1.ID = s.SignedId -- Доработать
	LEFT JOIN E30247_PRIORITY p1 ON e1.PatchId = p1.PatchId AND e1.ID = p1.ID; -- Доработать

INSERT INTO E30247_PRIORITY (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT s.IntervalId, 312001,
		--s.SignedId, p1.C1783376938461729511, p.C1783376938461729511,
		CASE WHEN p1.C1783376938461729511 > p.C1783376938461729511 THEN p1.C1783376938461729511 ELSE p.C1783376938461729511 END C1783376938461729511,
		--p1.C8592504141572910447, p.C8592504141572910447,
		CASE WHEN p1.C8592504141572910447 > p.C8592504141572910447 THEN p1.C8592504141572910447 ELSE p.C8592504141572910447 END C8592504141572910447, -- Этого быть не должно, поскольку режим Deny
		--p1.C8661971990170678466, p.C8661971990170678466,
		CASE WHEN p1.C8661971990170678466 > p.C8661971990170678466 THEN p1.C8661971990170678466 ELSE p.C8661971990170678466 END C8661971990170678466, -- LinkGuid для ML также копируем, это позволит
		--p1.C3857807440503096169, p.C3857807440503096169,
		CASE WHEN p1.C3857807440503096169 > p.C3857807440503096169 THEN p1.C3857807440503096169 ELSE p.C3857807440503096169 END C3857807440503096169 -- сравнивать без объединений с PRIORITY
	FROM E30247_PRIORITY p
	INNER JOIN #T_SEPARATE s ON p.PatchId = 312001 AND p.ID = s.ID -- Доработать
	LEFT JOIN E30247_PRIORITY p1 ON p1.PatchId = s.SignedPatchId AND p1.ID = s.SignedId; -- Доработать

INSERT INTO POSLINK (REFPOSITIONGUID, REFELEMENTID, ANCOBJECTID, ANCELEMENTGUID, LINKTYPE, LINKDESC)
SELECT s.IntervalGuid, 30247, p.ANCOBJECTID, p.ANCELEMENTGUID, p.LINKTYPE, p.LINKDESC
	FROM POSLINK p
	INNER JOIN #T_SEPARATE s ON p.REFPOSITIONGUID = s.Guid
	WHERE p.REFELEMENTID = 30247;
	
INSERT INTO #T_ITERATION_ML (Guid, C8661971990170678466_OLD, C8661971990170678466_NEW, C3857807440503096169_OLD, C3857807440503096169_NEW)
SELECT s.IntervalGuid,
		e.C8661971990170678466,
		CASE WHEN e.C8661971990170678466 IS NOT NULL THEN NEWID() ELSE NULL END,
		e.C3857807440503096169,
		CASE WHEN e.C3857807440503096169 IS NOT NULL THEN NEWID() ELSE NULL END -- Доработать до CASE
	FROM #T_SEPARATE s
	INNER JOIN E30247 e ON e.Id = s.IntervalId;

UPDATE e SET C8661971990170678466 = t.C8661971990170678466_NEW, C3857807440503096169 = t.C3857807440503096169_NEW
	FROM E30247 e
	INNER JOIN #T_ITERATION_ML t ON e.GUID = t.Guid

INSERT INTO MULTIPLELINK (LinkGuid, AncObjectID, RefPositionGuid, RefExtColID)
SELECT C8661971990170678466_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C8661971990170678466_OLD
	WHERE t.C8661971990170678466_OLD IS NOT NULL
UNION ALL
SELECT C3857807440503096169_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C3857807440503096169_OLD
	WHERE t.C3857807440503096169_OLD IS NOT NULL

-- Очищать таблицу ML в конце каждой итерации
TRUNCATE TABLE #T_ITERATION_ML;


-- Удаляем записи, подвергшиеся расщеплению
DELETE FROM E30247_DEDUP WHERE ID IN (SELECT Id FROM #T_SEPARATE);
DELETE FROM E30247_SOURCE WHERE PatchId = 312001 AND ID IN (SELECT ID FROM #T_SEPARATE); -- Доработать
DELETE FROM E30247_PRIORITY WHERE PatchId = 312001 AND ID IN (SELECT Id FROM #T_SEPARATE); -- Доработать
DELETE FROM E30247 WHERE ID IN (SELECT Id FROM #T_SEPARATE);
DELETE FROM POSLINK WHERE REFELEMENTID = 30247 AND REFPOSITIONGUID IN (SELECT Guid FROM #T_SEPARATE);
DELETE FROM MULTIPLELINK WHERE RefExtColID IN (27455,27456) AND RefPositionGuid IN (SELECT Guid FROM #T_SEPARATE);


-- Очищать таблицу в конце каждой итерации
TRUNCATE TABLE #T_ITERATION;

-- Очищать таблицу в конце каждой итерации
TRUNCATE TABLE #T_SEPARATE;
SELECT @@TRANCOUNT



-- Итерация 3

-- Подготовка данных для расщепления записей
-- Добавить
INSERT INTO #T_SEPARATE (Id, Guid, SignedId, SignedPatchId, IntervalId, DocumentBeginDate, DocumentEndDate, RemoveLeft, RemoveRight, Directive) -- Добавить поля
SELECT e.Id, e.GUID, e1.Id, e1.PatchId, next value for SEQ_E30247, -- Добавить поля
		CASE WHEN e.DocumentBeginDate > e1.DocumentBeginDate THEN e.DocumentBeginDate ELSE e1.DocumentBeginDate END BeginDate,
		CASE WHEN e.DocumentEndDate < e1.DocumentEndDate THEN e.DocumentEndDate ELSE e1.DocumentEndDate END EndDate,
		CASE WHEN e.DocumentBeginDate = e1.DocumentBeginDate THEN e.RemoveLeft ELSE 0 END RemoveLeft,
		CASE WHEN e.DocumentEndDate = e1.DocumentEndDate THEN e.RemoveRight ELSE 0 END RemoveRight,
		CASE WHEN e.DocumentEndDate = e1.DocumentEndDate AND e.Directive = 1 THEN 1 ELSE 2 END Directive
	FROM E30247 e
	INNER JOIN E30247_PRIORITY p ON e.PatchId = p.PatchId AND e.Id = p.Id -- Проверить
	INNER JOIN E30247 e1 on e.ObjectId = e1.ObjectId AND e.DocumentBeginDate <= e1.DocumentEndDate AND e1.DocumentBeginDate <= e.DocumentEndDate
	INNER JOIN E30247_PRIORITY p1 ON e1.PatchId = p1.PatchId AND e1.Id = p1.Id AND -- Проверить
		(
			p1.C1783376938461729511 > p.C1783376938461729511 
			OR
			p1.C8592504141572910447 > p.C8592504141572910447 -- Для режима Deny этого условия быть не должно.
			OR
			p1.C8661971990170678466 > p.C8661971990170678466
			OR
			p1.C3857807440503096169 > p.C3857807440503096169
		)
	WHERE e.Id IN (SELECT Id FROM #T_EXISTING_POSITIONS WHERE Iteration = 1) AND e.State IS NULL AND e.ObjectDel = 0 AND e1.State_Tmp = 0;

-- Добавить
INSERT INTO #T_SEPARATE (Id, Guid, SignedId, SignedPatchId, IntervalId, DocumentBeginDate, DocumentEndDate, RemoveLeft, RemoveRight, Directive) -- Добавить поле
SELECT e.Id, e.Guid, null, null, next value for SEQ_E30247, e.DocumentBeginDate, DATEADD(ms, -3, bd.MinBeginDate), e.RemoveLeft, 0, 2 -- Добавить поле
	FROM E30247 e
	INNER JOIN
	(
		SELECT Id, MIN(DocumentBeginDate) MinBeginDate FROM #T_SEPARATE GROUP BY Id
	) bd ON e.Id = bd.Id and e.DocumentBeginDate < bd.MinBeginDate;

-- Добавить
INSERT INTO #T_SEPARATE (Id, Guid, SignedId, SignedPatchId, IntervalId, DocumentBeginDate, DocumentEndDate, RemoveLeft, RemoveRight, Directive) -- Добавить поле
SELECT e.Id, e.Guid, null, null, next value for SEQ_E30247, DATEADD(ms, 3, ed.MaxEndDate), e.DocumentEndDate, 0, e.RemoveRight, e.Directive -- Добавить поле
	FROM E30247 e
	INNER JOIN
	(
		SELECT Id, MAX(DocumentEndDate) MaxEndDate FROM #T_SEPARATE GROUP BY Id
	) ed ON e.Id = ed.Id and e.DocumentEndDate > ed.MaxEndDate;

-- Добавить
INSERT INTO #T_SEPARATE (Id, Guid, SignedId, SignedPatchId, IntervalId, DocumentBeginDate, DocumentEndDate, RemoveLeft, RemoveRight, Directive) -- Добавить поле
SELECT s1.Id, s1.Guid, null, null, next value for SEQ_E30247, DATEADD(ms, 3, s1.DocumentEndDate), DATEADD(ms, -3, s2.DocumentBeginDate), 0, 0, 2 -- Добавить поле
	FROM #T_SEPARATE s1
	INNER JOIN #T_SEPARATE s2 ON s1.Id = s2.Id AND s1.DocumentBeginDate < s2.DocumentBeginDate AND DATEADD(ms, 3, s1.DocumentEndDate) < s2.DocumentBeginDate AND
		NOT EXISTS(SELECT * FROM #T_SEPARATE s3 WHERE s3.Id = s1.Id AND s3.DocumentBeginDate > s1.DocumentBeginDate AND s3.DocumentBeginDate < s2.DocumentBeginDate);
-- Завершение подготовки данных для расщепления записей
SELECT * FROM #T_SEPARATE;



INSERT INTO #T_ITERATION (ID, ObjectID, LowerID, UpperID, LowerPatchID, UpperPatchID, LowerGUID, UpperGUID, LowerEdge, UpperEdge, -- LowerPatchID, UpperPatchID
		RemoveOption, PhantomDir, DocumentBeginDate, DocumentEndDate, ObjectDel)
SELECT ID, ObjectID, LowerID, UpperID, LowerPatchID, UpperPatchID, LowerGUID, UpperGUID, LowerDate, UpperDate, RemoveLeft + RemoveRight * 2, -- LowerPatchID, UpperPatchID
		CASE WHEN ISNULL(UpperDir, 2) = 1 THEN 1 ELSE 2 END, DocumentBeginDate, DocumentEndDate, ObjectDel
	FROM
	(
		SELECT e.ID, e.ObjectID, e.DocumentBeginDate, e.DocumentEndDate, e.RemoveLeft, e.RemoveRight,
				e.LowerID, e.LowerGUID, e.LowerDate, e.LowerPatchID, -- LowerPatchID
				e2.ID as UpperID, e2.GUID as UpperGUID, ISNULL(e2.DocumentEndDate, e.DocumentEndDate) UpperDate, e2.Directive UpperDir, e2.PatchID UpperPatchID, -- UpperPatchID
				e.ObjectDel, ROW_NUMBER()OVER(PARTITION BY e.ObjectID ORDER BY e2.DOCUMENTENDDATE DESC) rn
			FROM
			(
				SELECT e.ID, e.ObjectID, e.DocumentBeginDate, e.DocumentEndDate,
						CASE WHEN e.ObjectDel = 1 THEN 1 ELSE e.RemoveLeft END RemoveLeft,
						CASE WHEN e.ObjectDel = 1 THEN 1 ELSE e.RemoveRight END RemoveRight,
						e1.ID as LowerID, e1.GUID as LowerGUID, ISNULL(e1.DocumentBeginDate, e.DocumentBeginDate) LowerDate, e1.PatchID LowerPatchID, -- LowerPatchID
						e.ObjectDel, ROW_NUMBER()OVER(PARTITION BY e.ObjectID ORDER BY e1.DOCUMENTBEGINDATE) rn
					FROM E30247 e
					LEFT JOIN E30247 e1 ON CASE WHEN e.ObjectDel = 1 THEN 1 ELSE e.RemoveLeft END = 0 AND e1.ObjectID = e.ObjectID AND e1.State_Tmp = 0 AND
						(e.DocumentBeginDate > e1.DOCUMENTBEGINDATE AND e.DocumentBeginDate <= e1.DOCUMENTENDDATE)
					WHERE e.ID IN (SELECT ID FROM #T_EXISTING_POSITIONS WHERE Iteration = 1)
			) e
			LEFT JOIN E30247 e2 ON e.RemoveRight = 0 AND e2.ObjectID = e.ObjectID AND e2.State_Tmp = 0 AND
				(e.DocumentEndDate >= e2.DOCUMENTBEGINDATE AND e.DocumentEndDate < e2.DOCUMENTENDDATE)
			WHERE e.rn = 1
	) q
	WHERE q.rn = 1

UPDATE #T_ITERATION SET LowerPhantomID = NEXT VALUE FOR SEQ_E30247 WHERE LowerID IS NOT NULL; -- Добавить
UPDATE #T_ITERATION SET UpperPhantomID = NEXT VALUE FOR SEQ_E30247 WHERE UpperID IS NOT NULL; -- Добавить

UPDATE e SET State_Tmp = 312001, LastChangeDate = GETDATE()
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON e.ObjectID = t.ObjectID AND t.RemoveOption = 0
	WHERE e.State_Tmp = 0 AND e.DOCUMENTBEGINDATE BETWEEN t.LowerEdge AND t.UpperEdge AND e.DOCUMENTENDDATE BETWEEN t.LowerEdge AND t.UpperEdge

UPDATE e SET State_Tmp = 312001, LastChangeDate = GETDATE()
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON e.ObjectID = t.ObjectID AND t.RemoveOption = 1
	WHERE e.State_Tmp = 0 AND e.DOCUMENTENDDATE <= t.UpperEdge

UPDATE e SET State_Tmp = 312001, LastChangeDate = GETDATE()
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON e.ObjectID = t.ObjectID AND t.RemoveOption = 2
	WHERE e.State_Tmp = 0 AND e.DOCUMENTBEGINDATE >= t.LowerEdge

UPDATE e SET State_Tmp = 312001, LastChangeDate = GETDATE()
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON e.ObjectID = t.ObjectID AND t.RemoveOption = 3
	WHERE e.State_Tmp = 0


UPDATE E30247 SET State_Tmp = CASE WHEN t.ObjectDel = 1 THEN 312001 ELSE 0 END, StateDate = GETDATE(), LastChangeDate = GETDATE(), ActualBeginDate = GETDATE(), ActualEndDate = GETDATE()
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON e.ID = t.ID


INSERT INTO E30247 (id, guid, directive, objectid, patchid, usercode, documentbegindate, documentenddate, actualbegindate, actualenddate, -- Добавить ID
	State_Tmp, StateDate, LastChangeDate, AutomaticallyAdded, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.LowerPhantomId, t.LowerPhantomGuid, 2, e.ObjectID, 312001, e.UserCode, e.DocumentBeginDate, DATEADD(ms, -3, t.DocumentBeginDate), -- Добавить ID
		GETDATE(), GETDATE(), 0,GETDATE(), GETDATE(), 1,
		C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON t.LowerID = e.ID
	WHERE t.LowerID IS NOT NULL

INSERT INTO E30247_DEDUP (ID, DEDUP_STR_1, DEDUP_STR_2, DEDUP_STR_3) -- Исправить запрос
SELECT t.LowerPhantomID, d.DEDUP_STR_1, d.DEDUP_STR_2, d.DEDUP_STR_3
	FROM E30247_DEDUP d
	INNER JOIN #T_ITERATION t ON t.LowerID = d.ID
	WHERE t.LowerID IS NOT NULL

-- Добавить запрос
INSERT INTO E30247_SOURCE (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.LowerPhantomID, 312001, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247_SOURCE es
	INNER JOIN #T_ITERATION t ON t.LowerPatchID = es.PatchID AND t.LowerID = es.ID
	WHERE t.LowerID IS NOT NULL

-- Добавить запрос
INSERT INTO E30247_PRIORITY (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.LowerPhantomID, 312001, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247_PRIORITY es
	INNER JOIN #T_ITERATION t ON t.LowerPatchID = es.PatchID AND t.LowerID = es.ID
	WHERE t.LowerID IS NOT NULL

INSERT INTO POSLINK (REFPOSITIONGUID, REFELEMENTID, ANCOBJECTID, ANCELEMENTGUID, LINKTYPE, LINKDESC)
SELECT t.LowerPhantomGuid, 30247, p.ANCOBJECTID, p.ANCELEMENTGUID, p.LINKTYPE, p.LINKDESC
	FROM POSLINK p
	INNER JOIN #T_ITERATION t ON t.LowerGUID = p.REFPOSITIONGUID
	WHERE p.REFELEMENTID = 30247 AND t.LowerID IS NOT NULL


INSERT INTO E30247 (id, guid, directive, objectid, patchid, usercode, documentbegindate, documentenddate, actualbegindate, actualenddate, -- Добавить ID
	State_Tmp, StateDate, LastChangeDate, AutomaticallyAdded, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.UpperPhantomId, t.UpperPhantomGuid, t.PhantomDir, e.ObjectID, 312001, e.UserCode, DATEADD(ms, 3, t.DocumentEndDate), e.DocumentEndDate, -- Добавить ID
		GETDATE(), GETDATE(), 0,GETDATE(), GETDATE(), 1,
		C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247 e
	INNER JOIN #T_ITERATION t ON t.UpperID = e.ID
	WHERE t.UpperID IS NOT NULL

INSERT INTO E30247_DEDUP (ID, DEDUP_STR_1, DEDUP_STR_2, DEDUP_STR_3) -- Исправить запрос
SELECT t.UpperPhantomID, d.DEDUP_STR_1, d.DEDUP_STR_2, d.DEDUP_STR_3
	FROM E30247_DEDUP d
	INNER JOIN #T_ITERATION t ON t.UpperID = d.ID
	WHERE t.UpperID IS NOT NULL

-- Добавить запрос
INSERT INTO E30247_SOURCE (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.UpperPhantomID, 312001, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247_SOURCE es
	INNER JOIN #T_ITERATION t ON t.UpperPatchID = es.PatchID AND t.UpperID = es.ID -- Доработать
	WHERE t.UpperID IS NOT NULL

-- Добавить запрос
INSERT INTO E30247_PRIORITY (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT t.UpperPhantomID, 312001, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169
	FROM E30247_PRIORITY es
	INNER JOIN #T_ITERATION t ON t.UpperPatchID = es.PatchID AND t.UpperID = es.ID -- Доработать
	WHERE t.UpperID IS NOT NULL

INSERT INTO POSLINK (REFPOSITIONGUID, REFELEMENTID, ANCOBJECTID, ANCELEMENTGUID, LINKTYPE, LINKDESC)
SELECT t.UpperPhantomGuid, 30247, p.ANCOBJECTID, p.ANCELEMENTGUID, p.LINKTYPE, p.LINKDESC
	FROM POSLINK p
	INNER JOIN #T_ITERATION t ON t.UpperGUID = p.REFPOSITIONGUID
	WHERE p.REFELEMENTID = 30247 AND t.UpperID IS NOT NULL


-- Добавить
TRUNCATE TABLE #T_ITERATION_ML;


INSERT INTO #T_ITERATION_ML (Guid, C8661971990170678466_OLD, C8661971990170678466_NEW, C3857807440503096169_OLD, C3857807440503096169_NEW)
SELECT t.LowerPhantomGuid,
		e.C8661971990170678466,
		CASE WHEN e.C8661971990170678466 IS NOT NULL THEN NEWID() ELSE NULL END,
		e.C3857807440503096169,
		CASE WHEN e.C3857807440503096169 IS NOT NULL THEN NEWID() ELSE NULL END -- Доработать до CASE
	FROM #T_ITERATION t
	INNER JOIN E30247 e ON e.ID = t.LowerID
	WHERE t.LowerID IS NOT NULL

UPDATE e SET C8661971990170678466 = t.C8661971990170678466_NEW, C3857807440503096169 = t.C3857807440503096169_NEW
	FROM E30247 e
	INNER JOIN #T_ITERATION_ML t ON e.GUID = t.Guid

INSERT INTO MULTIPLELINK (LinkGuid, AncObjectID, RefPositionGuid, RefExtColID)
SELECT C8661971990170678466_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C8661971990170678466_OLD
	WHERE t.C8661971990170678466_OLD IS NOT NULL
UNION ALL
SELECT C3857807440503096169_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C3857807440503096169_OLD
	WHERE t.C3857807440503096169_OLD IS NOT NULL


-- Добавить
TRUNCATE TABLE #T_ITERATION_ML;


INSERT INTO #T_ITERATION_ML (Guid, C8661971990170678466_OLD, C8661971990170678466_NEW, C3857807440503096169_OLD, C3857807440503096169_NEW)
SELECT t.UpperPhantomGuid,
		e.C8661971990170678466,
		CASE WHEN e.C8661971990170678466 IS NOT NULL THEN NEWID() ELSE NULL END,
		e.C3857807440503096169,
		CASE WHEN e.C3857807440503096169 IS NOT NULL THEN NEWID() ELSE NULL END -- Доработать до CASE
	FROM #T_ITERATION t
	INNER JOIN E30247 e ON e.ID = t.UpperID
	WHERE t.UpperID IS NOT NULL

UPDATE e SET C8661971990170678466 = t.C8661971990170678466_NEW, C3857807440503096169 = t.C3857807440503096169_NEW
	FROM E30247 e
	INNER JOIN #T_ITERATION_ML t ON e.GUID = t.Guid

INSERT INTO MULTIPLELINK (LinkGuid, AncObjectID, RefPositionGuid, RefExtColID)
SELECT C8661971990170678466_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C8661971990170678466_OLD
	WHERE t.C8661971990170678466_OLD IS NOT NULL
UNION ALL
SELECT C3857807440503096169_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C3857807440503096169_OLD
	WHERE t.C3857807440503096169_OLD IS NOT NULL

-- Очищать таблицу ML в конце каждой итерации
TRUNCATE TABLE #T_ITERATION_ML;


-- Работа с приоритетами систем-источников. Весь этот блок добавить!
INSERT INTO E30247 (id, guid, directive, objectid, patchid, usercode, documentbegindate, documentenddate, actualbegindate, actualenddate,
	State_Tmp, StateDate, LastChangeDate, AutomaticallyAdded, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT s.IntervalId, s.IntervalGuid, s.Directive, e.ObjectID, 312001,
		CASE WHEN p1.C1783376938461729511 > p.C1783376938461729511 THEN e1.UserCode ELSE e.UserCode END UserCode,
		s.DocumentBeginDate, s.DocumentEndDate, e.ActualBeginDate, e.ActualEndDate, 0, e.StateDate, e.LastChangeDate, e.AutomaticallyAdded,
		--s.SignedId, p1.C1783376938461729511, p.C1783376938461729511,
		CASE WHEN p1.C1783376938461729511 > p.C1783376938461729511 THEN e1.C1783376938461729511 ELSE e.C1783376938461729511 END C1783376938461729511,
		--p1.C8592504141572910447, p.C8592504141572910447,
		CASE WHEN p1.C8592504141572910447 > p.C8592504141572910447 THEN e1.C8592504141572910447 ELSE e.C8592504141572910447 END C8592504141572910447, -- Этого быть не должно, поскольку режим Deny
		--p1.C8661971990170678466, p.C8661971990170678466,
		CASE WHEN p1.C8661971990170678466 > p.C8661971990170678466 THEN e1.C8661971990170678466 ELSE e.C8661971990170678466 END C8661971990170678466, -- LinkGuid для ML также копируем, это позволит
		--p1.C3857807440503096169, p.C3857807440503096169,
		CASE WHEN p1.C3857807440503096169 > p.C3857807440503096169 THEN e1.C3857807440503096169 ELSE e.C3857807440503096169 END C3857807440503096169 -- сравнивать без объединений с PRIORITY
	FROM E30247 e
	INNER JOIN E30247_PRIORITY p ON e.PatchID = p.PatchID AND e.ID = p.ID -- Добавить PatchID
	INNER JOIN #T_SEPARATE s ON e.ID = s.ID
	LEFT JOIN E30247 e1 ON e1.ID = s.SignedId
	LEFT JOIN E30247_PRIORITY p1 ON e1.PatchId = p1.PatchId AND e1.ID = p1.ID; -- Добавить PatchId

 -- Только если раздел поддерживает дедупликацию. Сравнение приоритетов только для дедуплицируемых реквизитов
 -- Если у подписанных записей приоритет больше, записи не вставляются и будут сформированы асинхронным процессом
 -- В тестовом случае такого запроса быть не должно, поскольку наименование не поддерживает приоритеты
INSERT INTO E30247_DEDUP (ID, DEDUP_STR_1, DEDUP_STR_2, DEDUP_STR_3)
SELECT s.IntervalId, d.DEDUP_STR_1, d.DEDUP_STR_2, d.DEDUP_STR_3
	FROM E30247_DEDUP d
	INNER JOIN #T_SEPARATE s ON d.ID = s.ID
	INNER JOIN E30247_PRIORITY p ON p.PatchId = 312001 AND p.ID = s.ID -- Добавить поля
	LEFT JOIN E30247_PRIORITY p1 ON p1.PatchID = s.SignedPatchId AND p1.ID = s.SignedId -- Добавить поля
	WHERE p1.ID IS NULL OR (p1.C8592504141572910447 <= p.C8592504141572910447 /* AND ...*/);

INSERT INTO E30247_SOURCE (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT s.IntervalId, 312001,
		--s.SignedId, p1.C1783376938461729511, p.C1783376938461729511,
		CASE WHEN p1.C1783376938461729511 > p.C1783376938461729511 THEN e1.C1783376938461729511 ELSE e.C1783376938461729511 END C1783376938461729511,
		--p1.C8592504141572910447, p.C8592504141572910447,
		CASE WHEN p1.C8592504141572910447 > p.C8592504141572910447 THEN e1.C8592504141572910447 ELSE e.C8592504141572910447 END C8592504141572910447, -- Этого быть не должно, поскольку режим Deny
		--p1.C8661971990170678466, p.C8661971990170678466,
		CASE WHEN p1.C8661971990170678466 > p.C8661971990170678466 THEN e1.C8661971990170678466 ELSE e.C8661971990170678466 END C8661971990170678466, -- LinkGuid для ML также копируем, это позволит
		--p1.C3857807440503096169, p.C3857807440503096169,
		CASE WHEN p1.C3857807440503096169 > p.C3857807440503096169 THEN e1.C3857807440503096169 ELSE e.C3857807440503096169 END C3857807440503096169 -- сравнивать без объединений с PRIORITY
	FROM E30247_SOURCE e
	INNER JOIN E30247_PRIORITY p ON p.PatchId = 312001 AND p.ID = e.ID -- Доработать
	INNER JOIN #T_SEPARATE s ON e.PatchId = 312001 AND e.ID = s.ID -- Доработать
	LEFT JOIN E30247_SOURCE e1 ON e1.PatchId = s.SignedPatchId AND e1.ID = s.SignedId -- Доработать
	LEFT JOIN E30247_PRIORITY p1 ON e1.PatchId = p1.PatchId AND e1.ID = p1.ID; -- Доработать

INSERT INTO E30247_PRIORITY (ID, PatchID, C1783376938461729511, C8592504141572910447, C8661971990170678466, C3857807440503096169)
SELECT s.IntervalId, 312001,
		--s.SignedId, p1.C1783376938461729511, p.C1783376938461729511,
		CASE WHEN p1.C1783376938461729511 > p.C1783376938461729511 THEN p1.C1783376938461729511 ELSE p.C1783376938461729511 END C1783376938461729511,
		--p1.C8592504141572910447, p.C8592504141572910447,
		CASE WHEN p1.C8592504141572910447 > p.C8592504141572910447 THEN p1.C8592504141572910447 ELSE p.C8592504141572910447 END C8592504141572910447, -- Этого быть не должно, поскольку режим Deny
		--p1.C8661971990170678466, p.C8661971990170678466,
		CASE WHEN p1.C8661971990170678466 > p.C8661971990170678466 THEN p1.C8661971990170678466 ELSE p.C8661971990170678466 END C8661971990170678466, -- LinkGuid для ML также копируем, это позволит
		--p1.C3857807440503096169, p.C3857807440503096169,
		CASE WHEN p1.C3857807440503096169 > p.C3857807440503096169 THEN p1.C3857807440503096169 ELSE p.C3857807440503096169 END C3857807440503096169 -- сравнивать без объединений с PRIORITY
	FROM E30247_PRIORITY p
	INNER JOIN #T_SEPARATE s ON p.PatchId = 312001 AND p.ID = s.ID -- Доработать
	LEFT JOIN E30247_PRIORITY p1 ON p1.PatchId = s.SignedPatchId AND p1.ID = s.SignedId; -- Доработать

INSERT INTO POSLINK (REFPOSITIONGUID, REFELEMENTID, ANCOBJECTID, ANCELEMENTGUID, LINKTYPE, LINKDESC)
SELECT s.IntervalGuid, 30247, p.ANCOBJECTID, p.ANCELEMENTGUID, p.LINKTYPE, p.LINKDESC
	FROM POSLINK p
	INNER JOIN #T_SEPARATE s ON p.REFPOSITIONGUID = s.Guid
	WHERE p.REFELEMENTID = 30247;
	
INSERT INTO #T_ITERATION_ML (Guid, C8661971990170678466_OLD, C8661971990170678466_NEW, C3857807440503096169_OLD, C3857807440503096169_NEW)
SELECT s.IntervalGuid,
		e.C8661971990170678466,
		CASE WHEN e.C8661971990170678466 IS NOT NULL THEN NEWID() ELSE NULL END,
		e.C3857807440503096169,
		CASE WHEN e.C3857807440503096169 IS NOT NULL THEN NEWID() ELSE NULL END -- Доработать до CASE
	FROM #T_SEPARATE s
	INNER JOIN E30247 e ON e.Id = s.IntervalId;

UPDATE e SET C8661971990170678466 = t.C8661971990170678466_NEW, C3857807440503096169 = t.C3857807440503096169_NEW
	FROM E30247 e
	INNER JOIN #T_ITERATION_ML t ON e.GUID = t.Guid

INSERT INTO MULTIPLELINK (LinkGuid, AncObjectID, RefPositionGuid, RefExtColID)
SELECT C8661971990170678466_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C8661971990170678466_OLD
	WHERE t.C8661971990170678466_OLD IS NOT NULL
UNION ALL
SELECT C3857807440503096169_NEW, ml.AncObjectID, t.Guid, ml.RefExtColID
	FROM #T_ITERATION_ML t
	INNER JOIN MULTIPLELINK ml ON ml.LinkGuid = t.C3857807440503096169_OLD
	WHERE t.C3857807440503096169_OLD IS NOT NULL

-- Очищать таблицу ML в конце каждой итерации
TRUNCATE TABLE #T_ITERATION_ML;


-- Удаляем записи, подвергшиеся расщеплению
DELETE FROM E30247_DEDUP WHERE ID IN (SELECT Id FROM #T_SEPARATE);
DELETE FROM E30247_SOURCE WHERE PatchId = 312001 AND ID IN (SELECT ID FROM #T_SEPARATE); -- Доработать
DELETE FROM E30247_PRIORITY WHERE PatchId = 312001 AND ID IN (SELECT Id FROM #T_SEPARATE); -- Доработать
DELETE FROM E30247 WHERE ID IN (SELECT Id FROM #T_SEPARATE);
DELETE FROM POSLINK WHERE REFELEMENTID = 30247 AND REFPOSITIONGUID IN (SELECT Guid FROM #T_SEPARATE);
DELETE FROM MULTIPLELINK WHERE RefExtColID IN (27455,27456) AND RefPositionGuid IN (SELECT Guid FROM #T_SEPARATE);


-- Очищать таблицу в конце каждой итерации
TRUNCATE TABLE #T_ITERATION;

-- Очищать таблицу в конце каждой итерации
TRUNCATE TABLE #T_SEPARATE;
SELECT @@TRANCOUNT

drop table #T_ITERATION_ML;
drop table #T_ITERATION;
drop table #T_EXISTING_POSITIONS;



-- Проверка уникальности Наименования
SELECT TOP 500 *
	FROM E30247 t0
	LEFT JOIN E30247_SOURCE ts0 ON ts0.ID = t0.ID 
	WHERE t0.ID IN (SELECT f.ID FROM E30247 f WHERE f.PatchID = 312001 AND f.State_Tmp = 0 AND NOT (f.Directive = 1 AND f.ObjectDel = 1) AND 
		EXISTS (SELECT * FROM E30247 e
			WHERE e.ObjectID <> f.ObjectID AND (f.DocumentBeginDate <= e.DocumentEndDate AND f.DocumentEndDate >= e.DocumentBeginDate) AND
				(e.C8592504141572910447 = f.C8592504141572910447 OR e.C8592504141572910447 IS NULL AND f.C8592504141572910447 IS NULL) AND
				(e.State_Tmp = 0 OR e.State = 0 AND e.ObjectID NOT IN (SELECT ObjectID FROM E30247 WHERE PatchID = 312001 ))))

drop table #T_OBJECTID;

SELECT * FROM E30247 WHERE UserCode = 1 ORDER BY ID
SELECT e.ID, e.PatchID, e.State_Tmp, e.DocumentBeginDate, e.DocumentEndDate, s.C1783376938461729511, s.C8592504141572910447, s.C8661971990170678466, s.C3857807440503096169
	FROM E30247_SOURCE s
	INNER JOIN E30247 e ON s.ID = e.ID
	WHERE e.UserCode = 1
	ORDER BY e.ID
SELECT e.ID, e.PatchID, e.State_Tmp, e.DocumentBeginDate, e.DocumentEndDate, s.C1783376938461729511, s.C8592504141572910447, s.C8661971990170678466, s.C3857807440503096169
	FROM E30247_PRIORITY s
	INNER JOIN E30247 e ON s.ID = e.ID
	WHERE e.UserCode = 1
	ORDER BY e.ID
SELECT * FROM E30247_DEDUP WHERE ID IN (SELECT ID FROM E30247 WHERE UserCode = 1) ORDER BY ID
SELECT e.ID, e.UserCode, e.PatchID, e.State_Tmp, e.DocumentBeginDate, e.DocumentEndDate, ml.*
	FROM E30247 e
	INNER JOIN MULTIPLELINK ml ON e.C8661971990170678466 = ml.LinkGuid
	WHERE e.UserCode = 1
	ORDER BY e.ID, ml.AncObjectID;
SELECT e.ID, e.UserCode, e.PatchID, e.State_Tmp, e.DocumentBeginDate, e.DocumentEndDate, ml.*
	FROM E30247 e
	INNER JOIN MULTIPLELINK ml ON e.C3857807440503096169 = ml.LinkGuid
	WHERE e.UserCode = 1
	ORDER BY e.ID, ml.AncObjectID;
SELECT COALESCE(c.SYSTEM_CODE, e.SYSTEM_CODE) SYSTEM_CODE, COALESCE(c.SYSTEM_PRIORITY, e.SYSTEM_PRIORITY) SYSTEM_PRIORITY
	FROM (SELECT SYSTEM_CODE, SYSTEM_PRIORITY FROM CLASSIFIER_SOURCE_SYSTEM WHERE N101_ID = 50241) c
	FULL OUTER JOIN (SELECT SYSTEM_CODE, SYSTEM_PRIORITY FROM EXTCOL_SOURCE_SYSTEM WHERE N112_ID = 27455) e ON c.SYSTEM_CODE = e.SYSTEM_CODE
SELECT * FROM EXTCOL_SOURCE_SYSTEM WHERE N112_ID = 27456

ROLLBACK TRAN